// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Xure.Data;

namespace Xure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220601215804_SO")]
    partial class SO
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Xure.Data.Brands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Америка",
                            Name = "Villams"
                        },
                        new
                        {
                            Id = 2,
                            Country = "Америка",
                            Name = "Tommy Hilfiger"
                        },
                        new
                        {
                            Id = 3,
                            Country = "Великобритания",
                            Name = "Polo"
                        },
                        new
                        {
                            Id = 4,
                            Country = "Россия",
                            Name = "Добрый"
                        },
                        new
                        {
                            Id = 5,
                            Country = "Германия",
                            Name = "Duracell"
                        });
                });

            modelBuilder.Entity("Xure.Data.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Еда"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Одежда"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Техника"
                        });
                });

            modelBuilder.Entity("Xure.Data.Clients", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "1ab2bff8-07be-441b-82d6-0d91174ad815"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "221a163b-8960-42f9-a19e-023493311599"
                        });
                });

            modelBuilder.Entity("Xure.Data.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateRegistration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("INN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OGRN")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateRegistration = new DateTime(2020, 11, 4, 14, 41, 0, 0, DateTimeKind.Unspecified),
                            Description = "Американский магазин одежды премиум-класса, выпускающий одежду, обувь, аксессуары, ароматы и товары для дома.",
                            INN = "4534239794",
                            Name = "iVan Clothes",
                            OGRN = "1091363440190"
                        },
                        new
                        {
                            Id = 2L,
                            DateRegistration = new DateTime(2021, 12, 26, 21, 14, 0, 0, DateTimeKind.Unspecified),
                            Description = "Сеть розничных магазинов",
                            INN = "0998416485",
                            Name = "Магнит",
                            OGRN = "9057136863819"
                        });
                });

            modelBuilder.Entity("Xure.Data.Delivery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceprtionPointId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceprtionPointId");

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("Xure.Data.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MessageTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SellerId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Xure.Data.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceptionPointId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("TrackNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ReceptionPointId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Xure.Data.OrderProduct", b =>
                {
                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Xure.Data.OrderReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Commentary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<byte>("ReasonId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReasonId");

                    b.ToTable("OrderReports");
                });

            modelBuilder.Entity("Xure.Data.PriceHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("PriceHistories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            UpdatedDate = new DateTime(2022, 5, 21, 19, 21, 0, 0, DateTimeKind.Unspecified),
                            Value = 50m
                        },
                        new
                        {
                            Id = 2L,
                            UpdatedDate = new DateTime(2022, 3, 18, 14, 35, 0, 0, DateTimeKind.Unspecified),
                            Value = 1849m
                        },
                        new
                        {
                            Id = 3L,
                            UpdatedDate = new DateTime(2021, 10, 12, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            Value = 1448m
                        },
                        new
                        {
                            Id = 4L,
                            UpdatedDate = new DateTime(2022, 3, 3, 11, 15, 0, 0, DateTimeKind.Unspecified),
                            Value = 81m
                        },
                        new
                        {
                            Id = 5L,
                            UpdatedDate = new DateTime(2022, 4, 28, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 9m
                        });
                });

            modelBuilder.Entity("Xure.Data.Prices", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("PriceHistoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PriceHistoryId");

                    b.ToTable("Prices");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            PriceHistoryId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            PriceHistoryId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            PriceHistoryId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            PriceHistoryId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            PriceHistoryId = 5L
                        });
                });

            modelBuilder.Entity("Xure.Data.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PriceId")
                        .HasColumnType("bigint");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PriceId");

                    b.HasIndex("SellerId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BrandId = 1,
                            CategoryId = 1,
                            Description = "Зеленые Краснодарские яблоки",
                            Name = "Яблоко",
                            PriceId = 1L,
                            SellerId = 1
                        },
                        new
                        {
                            Id = 2L,
                            BrandId = 2,
                            CategoryId = 2,
                            Description = "Недорогие джинсы",
                            Name = "Джинсы",
                            PriceId = 2L,
                            SellerId = 2
                        },
                        new
                        {
                            Id = 3L,
                            BrandId = 3,
                            CategoryId = 2,
                            Description = "Недорогая рубашка",
                            Name = "Рубашка",
                            PriceId = 3L,
                            SellerId = 2
                        },
                        new
                        {
                            Id = 4L,
                            BrandId = 4,
                            CategoryId = 1,
                            Description = "Вкусный яблочный сок без химии и добавок",
                            Name = "Сок",
                            PriceId = 4L,
                            SellerId = 1
                        },
                        new
                        {
                            Id = 5L,
                            BrandId = 5,
                            CategoryId = 3,
                            Description = "Долгосрочные батарейки",
                            Name = "Батарейки",
                            PriceId = 5L,
                            SellerId = 2
                        });
                });

            modelBuilder.Entity("Xure.Data.ProductReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Commentary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<byte>("ReasonId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReasonId");

                    b.ToTable("ProductReports");
                });

            modelBuilder.Entity("Xure.Data.ProductSpecifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductSpecifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "Вес"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Name = "Вес"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Name = "Вес"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Name = "Cостав"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Name = "Cрок годности"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Name = "Ткань"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Name = "Размер"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            Name = "Мощность"
                        });
                });

            modelBuilder.Entity("Xure.Data.ProductSpecificationsValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductSpecificationsId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductSpecificationsId");

                    b.HasIndex("UnitId");

                    b.ToTable("ProductSpecificationsValues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1L,
                            ProductSpecificationsId = 1,
                            UnitId = 1,
                            Value = "150"
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 1L,
                            ProductSpecificationsId = 5,
                            UnitId = 5,
                            Value = "1"
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 2L,
                            ProductSpecificationsId = 2,
                            UnitId = 1,
                            Value = "150"
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 2L,
                            ProductSpecificationsId = 5,
                            UnitId = 8,
                            Value = "2"
                        },
                        new
                        {
                            Id = 5,
                            ProductId = 2L,
                            ProductSpecificationsId = 6,
                            UnitId = 6,
                            Value = "80%"
                        },
                        new
                        {
                            Id = 6,
                            ProductId = 2L,
                            ProductSpecificationsId = 7,
                            UnitId = 7,
                            Value = "44-46"
                        },
                        new
                        {
                            Id = 7,
                            ProductId = 3L,
                            ProductSpecificationsId = 2,
                            UnitId = 1,
                            Value = "135"
                        },
                        new
                        {
                            Id = 8,
                            ProductId = 3L,
                            ProductSpecificationsId = 5,
                            UnitId = 5,
                            Value = "16"
                        },
                        new
                        {
                            Id = 9,
                            ProductId = 3L,
                            ProductSpecificationsId = 6,
                            UnitId = 6,
                            Value = "100%"
                        },
                        new
                        {
                            Id = 10,
                            ProductId = 3L,
                            ProductSpecificationsId = 7,
                            UnitId = 7,
                            Value = "43-45"
                        },
                        new
                        {
                            Id = 11,
                            ProductId = 4L,
                            ProductSpecificationsId = 1,
                            UnitId = 1,
                            Value = "800"
                        },
                        new
                        {
                            Id = 12,
                            ProductId = 4L,
                            ProductSpecificationsId = 4,
                            UnitId = 10,
                            Value = "Яблочный концентрат"
                        },
                        new
                        {
                            Id = 13,
                            ProductId = 4L,
                            ProductSpecificationsId = 4,
                            UnitId = 10,
                            Value = "Вода"
                        },
                        new
                        {
                            Id = 14,
                            ProductId = 4L,
                            ProductSpecificationsId = 4,
                            UnitId = 10,
                            Value = "Cахар"
                        },
                        new
                        {
                            Id = 15,
                            ProductId = 4L,
                            ProductSpecificationsId = 5,
                            UnitId = 5,
                            Value = "6"
                        },
                        new
                        {
                            Id = 16,
                            ProductId = 5L,
                            ProductSpecificationsId = 3,
                            UnitId = 1,
                            Value = "30"
                        },
                        new
                        {
                            Id = 17,
                            ProductId = 5L,
                            ProductSpecificationsId = 5,
                            UnitId = 8,
                            Value = "10"
                        },
                        new
                        {
                            Id = 18,
                            ProductId = 5L,
                            ProductSpecificationsId = 8,
                            UnitId = 9,
                            Value = "2000"
                        });
                });

            modelBuilder.Entity("Xure.Data.Reason", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Reasons");
                });

            modelBuilder.Entity("Xure.Data.ReceptionPoint", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("CloseTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("time");

                    b.Property<TimeSpan>("OpenTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("time");

                    b.HasKey("id");

                    b.ToTable("ReceptionPoints");
                });

            modelBuilder.Entity("Xure.Data.Reviews", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Commentary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Xure.Data.SellerOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<long>("DeliveryId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("OrderId");

                    b.ToTable("SellerOrders");
                });

            modelBuilder.Entity("Xure.Data.Sellers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Sellers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1L,
                            UserId = "c49e0b3a-bebc-47d3-b65d-e2da531830ae"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 2L,
                            UserId = "6a522bd3-d3d6-4f6c-bd0e-f00e38a89b86"
                        });
                });

            modelBuilder.Entity("Xure.Data.Units", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Name = "Грамм"
                        },
                        new
                        {
                            id = 2,
                            Name = "Килограмм"
                        },
                        new
                        {
                            id = 3,
                            Name = "Литр"
                        },
                        new
                        {
                            id = 4,
                            Name = "Миллиметр"
                        },
                        new
                        {
                            id = 5,
                            Name = "Месяц"
                        },
                        new
                        {
                            id = 6,
                            Name = "Хлопок"
                        },
                        new
                        {
                            id = 7,
                            Name = "S"
                        },
                        new
                        {
                            id = 8,
                            Name = "Год"
                        },
                        new
                        {
                            id = 9,
                            Name = "mA"
                        },
                        new
                        {
                            id = 10,
                            Name = " "
                        });
                });

            modelBuilder.Entity("Xure.Data.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Passport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "c49e0b3a-bebc-47d3-b65d-e2da531830ae",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a708f24-8818-45fb-9d72-4de524fe5f43",
                            Email = "DaryaDubova@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "+7916463121",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f8b8b1b-7426-4b3d-81f1-e1ebb8aca56f",
                            TwoFactorEnabled = false,
                            UserName = "Darya",
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Confirmed = false,
                            Passport = "6034 877186",
                            Surname = "Dubova"
                        },
                        new
                        {
                            Id = "6a522bd3-d3d6-4f6c-bd0e-f00e38a89b86",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2972523-5af6-4b90-9d02-8abac509d10c",
                            Email = "DaniilPetrov@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "+7921649797",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0511c81-960a-4ec0-a0d9-74ba025a3afc",
                            TwoFactorEnabled = false,
                            UserName = "Daniil",
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Confirmed = false,
                            Passport = "2016 518374",
                            Surname = "Petrov"
                        },
                        new
                        {
                            Id = "1ab2bff8-07be-441b-82d6-0d91174ad815",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6ea7e841-c4a9-40c5-b1f0-131832ed6f29",
                            Email = "YanaL@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "+79892221468",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97e12bfa-6164-44f2-9eff-ac6d6c87d2f6",
                            TwoFactorEnabled = false,
                            UserName = "Yana",
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Confirmed = false,
                            Passport = "6048 518375",
                            Surname = "Levchenkova"
                        },
                        new
                        {
                            Id = "221a163b-8960-42f9-a19e-023493311599",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dcdab130-c5d3-4924-a42f-6419ac4994ff",
                            Email = "YP@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "78106964233",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1015f6f4-0e90-4669-bc76-d53b1c274a1d",
                            TwoFactorEnabled = false,
                            UserName = "Yan",
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Confirmed = false,
                            Passport = "6510 838162",
                            Surname = "Pedrechuk"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Xure.Data.Clients", b =>
                {
                    b.HasOne("Xure.Data.AppUser", "UserInfo")
                        .WithOne("Client")
                        .HasForeignKey("Xure.Data.Clients", "UserId");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Xure.Data.Delivery", b =>
                {
                    b.HasOne("Xure.Data.ReceptionPoint", "ReceptionPoint")
                        .WithMany("Deliveries")
                        .HasForeignKey("ReceprtionPointId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ReceptionPoint");
                });

            modelBuilder.Entity("Xure.Data.Message", b =>
                {
                    b.HasOne("Xure.Data.Clients", "Client")
                        .WithMany("ClientMessages")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Xure.Data.Sellers", "Seller")
                        .WithMany("SellerMessages")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Xure.Data.Order", b =>
                {
                    b.HasOne("Xure.Data.Clients", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xure.Data.ReceptionPoint", "ReceptionPoint")
                        .WithMany("Orders")
                        .HasForeignKey("ReceptionPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ReceptionPoint");
                });

            modelBuilder.Entity("Xure.Data.OrderProduct", b =>
                {
                    b.HasOne("Xure.Data.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xure.Data.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Xure.Data.OrderReport", b =>
                {
                    b.HasOne("Xure.Data.Order", "Order")
                        .WithMany("OrderReports")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xure.Data.Reason", "Reason")
                        .WithMany("OrderReports")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Reason");
                });

            modelBuilder.Entity("Xure.Data.Prices", b =>
                {
                    b.HasOne("Xure.Data.PriceHistory", "PriceHistory")
                        .WithMany("Prices")
                        .HasForeignKey("PriceHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceHistory");
                });

            modelBuilder.Entity("Xure.Data.Product", b =>
                {
                    b.HasOne("Xure.Data.Brands", "Brands")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xure.Data.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xure.Data.Prices", "Price")
                        .WithMany("Products")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xure.Data.Sellers", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brands");

                    b.Navigation("Category");

                    b.Navigation("Price");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Xure.Data.ProductReport", b =>
                {
                    b.HasOne("Xure.Data.Product", "Product")
                        .WithMany("ProductReports")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xure.Data.Reason", "Reason")
                        .WithMany("ProductReports")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Reason");
                });

            modelBuilder.Entity("Xure.Data.ProductSpecifications", b =>
                {
                    b.HasOne("Xure.Data.Category", "Category")
                        .WithMany("ProductSpecifications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Xure.Data.ProductSpecificationsValue", b =>
                {
                    b.HasOne("Xure.Data.Product", "Product")
                        .WithMany("ProductSpecificationsValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Xure.Data.ProductSpecifications", "ProductSpecification")
                        .WithMany("ProductSpecificationsValues")
                        .HasForeignKey("ProductSpecificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xure.Data.Units", "Unit")
                        .WithMany("productSpecificationsValues")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductSpecification");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Xure.Data.Reviews", b =>
                {
                    b.HasOne("Xure.Data.Clients", "Client")
                        .WithMany("Reviews")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xure.Data.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Xure.Data.SellerOrder", b =>
                {
                    b.HasOne("Xure.Data.Delivery", "Delivery")
                        .WithMany("SellerOrders")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xure.Data.Order", "Order")
                        .WithMany("SellerOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Xure.Data.Sellers", b =>
                {
                    b.HasOne("Xure.Data.Company", "Company")
                        .WithMany("Sellers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xure.Data.AppUser", "UserInfo")
                        .WithOne("Seller")
                        .HasForeignKey("Xure.Data.Sellers", "UserId");

                    b.Navigation("Company");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Xure.Data.Brands", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Xure.Data.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("ProductSpecifications");
                });

            modelBuilder.Entity("Xure.Data.Clients", b =>
                {
                    b.Navigation("ClientMessages");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Xure.Data.Company", b =>
                {
                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("Xure.Data.Delivery", b =>
                {
                    b.Navigation("SellerOrders");
                });

            modelBuilder.Entity("Xure.Data.Order", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("OrderReports");

                    b.Navigation("SellerOrders");
                });

            modelBuilder.Entity("Xure.Data.PriceHistory", b =>
                {
                    b.Navigation("Prices");
                });

            modelBuilder.Entity("Xure.Data.Prices", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Xure.Data.Product", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("ProductReports");

                    b.Navigation("ProductSpecificationsValues");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Xure.Data.ProductSpecifications", b =>
                {
                    b.Navigation("ProductSpecificationsValues");
                });

            modelBuilder.Entity("Xure.Data.Reason", b =>
                {
                    b.Navigation("OrderReports");

                    b.Navigation("ProductReports");
                });

            modelBuilder.Entity("Xure.Data.ReceptionPoint", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Xure.Data.Sellers", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SellerMessages");
                });

            modelBuilder.Entity("Xure.Data.Units", b =>
                {
                    b.Navigation("productSpecificationsValues");
                });

            modelBuilder.Entity("Xure.Data.AppUser", b =>
                {
                    b.Navigation("Client");

                    b.Navigation("Seller");
                });
#pragma warning restore 612, 618
        }
    }
}
